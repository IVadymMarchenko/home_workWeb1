from abc import ABC, abstractmethod
from AddressBook import *


class AbstractUserInterface(ABC):

    def __init__(self,data):
        self.data=data

    @abstractmethod
    def handle(self):
        pass





class ConsoleUI(AbstractUserInterface):

    def handle(self):
        result = self.display_contacts()
        return result

    def display_contacts(self):
        if not self.data.data:
            print(f"{bcolors.WARNING}üìã Addressbook is emptyüòû {bcolors.RESET}")
            print(f"{bcolors.GREEN}ü§ó But, you can add a contact if you want ‚úèÔ∏è {bcolors.RESET}")
            return
        else:
            print(f"{bcolors.GREEN}üìñ All contacts in book:üöÄ {bcolors.RESET}")
            table = []
            for contact in self.data.data:
                phone_numbers = ", ".join(
                    str(phone) for phone in contact.get("phone", [])
                )
                emails = ", ".join(str(email) for email in contact.get("email", []))
                table.append(
                    [
                        str(contact["id"]),
                        str(contact["name"]),
                        phone_numbers,
                        str(contact.get("birthday", "")),
                        emails,
                    ]
                )
            headers = [
                emojize(f":id: {bcolors.BLUE}ID{bcolors.RESET}", language="alias"),
                emojize(f":bust_in_silhouette: {bcolors.BLUE}Name{bcolors.RESET}", language="alias"),
                emojize(f":telephone_receiver: {bcolors.BLUE}Phone{bcolors.RESET}", language="alias"),
                emojize(f":birthday_cake: {bcolors.BLUE}Birthday{bcolors.RESET}", language="alias"),
                emojize(f":e-mail: {bcolors.BLUE}Email{bcolors.RESET}", language="alias"),
            ]
            print(tabulate(table, headers=headers, tablefmt='pretty'))

class GetCommand:

    def handle(self):
        result=self.display_commands()
        print(result)
        #return result

    def display_commands(self, language='en'):

        if language == 'en':
            command_list = [
                bcolors.ORANGE + "cli" + bcolors.RESET,
                bcolors.ORANGE + "change-language" + bcolors.RESET,
                bcolors.ORANGE + "contact-add" + bcolors.RESET,
                bcolors.ORANGE + "contact-find" + bcolors.RESET,
                bcolors.ORANGE + "contact-show-all" + bcolors.RESET,
                bcolors.ORANGE + "contact-phone-add" + bcolors.RESET,
                bcolors.ORANGE + "contact-phone-remove" + bcolors.RESET,
                bcolors.ORANGE + "contact-email-add" + bcolors.RESET,
                bcolors.ORANGE + "contact-email-remove" + bcolors.RESET,
                bcolors.ORANGE + "contact-phone-edit" + bcolors.RESET,
                bcolors.ORANGE + "contact-email-edit" + bcolors.RESET,
                bcolors.ORANGE + "contact-birthday-edit" + bcolors.RESET,
                bcolors.ORANGE + "contact-remove" + bcolors.RESET,
                bcolors.ORANGE + "display-birthdays" + bcolors.RESET,
                bcolors.ORANGE + "note-add" + bcolors.RESET,
                bcolors.ORANGE + "note-find" + bcolors.RESET,
                bcolors.ORANGE + "note-show-all" + bcolors.RESET,
                bcolors.ORANGE + "note-edit" + bcolors.RESET,
                bcolors.ORANGE + "note-remove" + bcolors.RESET,
                bcolors.ORANGE + "tag-add" + bcolors.RESET,
                bcolors.ORANGE + "tag-edit" + bcolors.RESET,
                bcolors.ORANGE + "tag-remove" + bcolors.RESET,
                bcolors.ORANGE + "tag-find-sort" + bcolors.RESET,
                bcolors.ORANGE + "file-sort" + bcolors.RESET,
                bcolors.ORANGE + "file-extension-show" + bcolors.RESET,
                bcolors.ORANGE + "file-extension-add" + bcolors.RESET,
                bcolors.ORANGE + "file-extension-remove" + bcolors.RESET,
                bcolors.ORANGE + "quit" + bcolors.RESET,
                bcolors.ORANGE + "exit" + bcolors.RESET,
                bcolors.ORANGE + "q" + bcolors.RESET,
            ]

            command_explain = [
                bcolors.BLUE + "–≤–∏–≤–æ–¥–∏—Ç—å —Å–ø–∏—Å–æ–∫ –≤—Å—ñ—Ö –¥–æ—Å—Ç—É–ø–Ω–∏—Ö –∫–æ–º–∞–Ω–¥" + bcolors.RESET,
                bcolors.BLUE + "–∑–º—ñ–Ω–∏—Ç–∏ –º–æ–≤—É –¥–æ–¥–∞—Ç–∫–∞" + bcolors.RESET,
                bcolors.BLUE + "–∑–±–µ—Ä—ñ–≥–∞—î –∫–æ–Ω—Ç–∞–∫—Ç –∑ —ñ–º–µ–Ω–µ–º, –∞–¥—Ä–µ—Å–æ–º, –Ω–æ–º–µ—Ä–æ–º —Ç–µ–ª–µ—Ñ–æ–Ω–∞, email —Ç–∞ –¥–Ω–µ–º –Ω–∞—Ä–æ–¥–∂–µ–Ω–Ω—è –¥–æ –∫–Ω–∏–≥–∏ –∫–æ–Ω—Ç–∞–∫—Ç—ñ–≤" + bcolors.RESET,
                bcolors.BLUE + "–∑–¥—ñ–π—Å–Ω—é—î –ø–æ—à—É–∫ –∫–æ–Ω—Ç–∞–∫—Ç—É —Å–µ—Ä–µ–¥ –∫–æ–Ω—Ç–∞–∫—Ç—ñ–≤ –∫–Ω–∏–≥–∏" + bcolors.RESET,
                bcolors.BLUE + "–ø–æ–∫–∞–∑—É—î –≤—Å—ñ —ñ—Å–Ω—É—é—á—ñ –∫–æ–Ω—Ç–∞–∫—Ç–∏ –≤ –∫–Ω–∏–∑—ñ –∫–æ–Ω—Ç–∞–∫—Ç—ñ–≤" + bcolors.RESET,
                bcolors.BLUE + "–¥–æ–¥–∞—Ç–∏ —ñ—â–µ 1-–∏–Ω phone –¥–æ —ñ—Å–Ω—É—é—á–æ–≥–æ –∫–æ–Ω—Ç–∞–∫—Ç—É" + bcolors.RESET,
                bcolors.BLUE + "–≤–∏–¥–∞–ª–µ–Ω–Ω—è —ñ—Å–Ω—É—é—á–æ–≥–æ phone" + bcolors.RESET,
                bcolors.BLUE + "–¥–æ–¥–∞—Ç–∏ —ñ—â–µ 1-–∏–Ω email –¥–æ —ñ—Å–Ω—É—é—á–æ–≥–æ –∫–æ–Ω—Ç–∞–∫—Ç—É" + bcolors.RESET,
                bcolors.BLUE + "–≤–∏–¥–∞–ª–µ–Ω–Ω—è —ñ—Å–Ω—É—é—á–æ–≥–æ email" + bcolors.RESET,
                bcolors.BLUE + "—Ä–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è phone —ñ—Å–Ω—É—é—á–æ–≥–æ –∫–æ–Ω—Ç–∞–∫—Ç—É" + bcolors.RESET,
                bcolors.BLUE + "—Ä–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è email —ñ—Å–Ω—É—é—á–æ–≥–æ –∫–æ–Ω—Ç–∞–∫—Ç—É" + bcolors.RESET,
                bcolors.BLUE + "—Ä–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è birthday —ñ—Å–Ω—É—é—á–æ–≥–æ –∫–æ–Ω—Ç–∞–∫—Ç—É" + bcolors.RESET,
                bcolors.BLUE + "–≤–∏–¥–∞–ª–µ–Ω–Ω—è —ñ—Å–Ω—É—é—á–æ–≥–æ –∫–æ–Ω—Ç–∞–∫—Ç—É" + bcolors.RESET,
                bcolors.BLUE + "–≤–∏–≤–æ–¥–∏—Ç—å —Å–ø–∏—Å–æ–∫ –∫–æ–Ω—Ç–∞–∫—Ç—ñ–≤, —É —è–∫–∏—Ö –¥–µ–Ω—å –Ω–∞—Ä–æ–¥–∂–µ–Ω–Ω—è —á–µ—Ä–µ–∑ –∑–∞–¥–∞–Ω—É –∫—ñ–ª—å–∫—ñ—Å—Ç—å –¥–Ω—ñ–≤ –≤—ñ–¥ –ø–æ—Ç–æ—á–Ω–æ—ó –¥–∞—Ç–∏" + bcolors.RESET,
                bcolors.BLUE + "–∑–±–µ—Ä—ñ–≥–∞—î –Ω–æ—Ç–∞—Ç–∫—É –∑–∞ —ñ–º–µ–Ω–µ–º –∞–≤—Ç–æ—Ä–∞" + bcolors.RESET,
                bcolors.BLUE + "–∑–¥—ñ–π—Å–Ω—é—î –ø–æ—à—É–∫ –Ω–æ—Ç–∞—Ç–∫–∏ —Å–µ—Ä–µ–¥ —ñ—Å–Ω—É—é—á–∏—Ö –Ω–æ—Ç–∞—Ç–∫—ñ–≤" + bcolors.RESET,
                bcolors.BLUE + "–ø–æ–∫–∞–∑—É—î –≤—Å—ñ —ñ—Å–Ω—É—é—á—ñ –Ω–æ—Ç–∞—Ç–∫–∏" + bcolors.RESET,
                bcolors.BLUE + "—Ä–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è —ñ—Å–Ω—É—é—á–æ—ó –Ω–æ—Ç–∞—Ç–∫–∏" + bcolors.RESET,
                bcolors.BLUE + "–≤–∏–¥–∞–ª–µ–Ω–Ω—è —ñ—Å–Ω—É—é—á–æ—ó –Ω–æ—Ç–∞—Ç–∫–∏" + bcolors.RESET,
                bcolors.BLUE + "–¥–æ–¥–∞–≤–∞–Ω–Ω—è —Ç–µ–≥—ñ–≤ –¥–æ —ñ—Å–Ω—É—é—á–æ—ó –Ω–æ—Ç–∞—Ç–∫–∏" + bcolors.RESET,
                bcolors.BLUE + "—Ä–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è —Ç–µ–≥—ñ–≤ —ñ—Å–Ω—É—é—á–æ—ó –Ω–æ—Ç–∞—Ç–∫–∏" + bcolors.RESET,
                bcolors.BLUE + "–≤–∏–¥–∞–ª–µ–Ω–Ω—è —Ç–µ–≥—ñ–≤ –∑ —ñ—Å–Ω—É—é—á–æ—ó –Ω–æ—Ç–∞—Ç–∫–∏" + bcolors.RESET,
                bcolors.BLUE + "–ø–æ—à—É–∫ —Ç–∞ —Å–æ—Ä—Ç—É–≤–∞–Ω–Ω—è –Ω–æ—Ç–∞—Ç–æ–∫ –∑–∞ —Ç–µ–≥–∞–º–∏" + bcolors.RESET,
                bcolors.BLUE + "—Å–æ—Ä—Ç—É–≤–∞–Ω–Ω—è —Ñ–∞–π–ª—ñ–≤ —É –∑–∞–∑–Ω–∞—á–µ–Ω—ñ–π –ø–∞–ø—Ü—ñ –∑–∞ –∫–∞—Ç–µ–≥–æ—Ä—ñ—è–º–∏ (–∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è, –¥–æ–∫—É–º–µ–Ω—Ç–∏, –≤—ñ–¥–µ–æ —Ç–∞ —ñ–Ω.)." + bcolors.RESET,
                bcolors.BLUE + "–ø–æ–∫–∞–∑–∞—Ç–∏ –≤—Å—ñ —Ä–æ–∑—à–∏—Ä–µ–Ω–Ω—è" + bcolors.RESET,
                bcolors.BLUE + "–¥–æ–¥–∞–≤–∞–Ω–Ω—è –¥–æ–¥–∞—Ç–∫–æ–≤–æ —Ä–æ–∑—à–∏—Ä–µ–Ω–Ω—è –¥–ª—è —Å–æ—Ä—Ç—É–≤–∞–Ω–Ω—è" + bcolors.RESET,
                bcolors.BLUE + "–≤–∏–¥–∞–ª–µ–Ω–Ω—è —Ä–æ–∑—à–∏—Ä–µ–Ω–Ω—è —ñ–∑ —Å–ø–∏—Å–∫—É –¥–ª—è —Å–æ—Ä—Ç—É–≤–∞–Ω–Ω—è" + bcolors.RESET,
                bcolors.BLUE + "–≤–∏—Ö—ñ–¥ –∑ –ø—Ä–æ–≥—Ä–∞–º–∏" + bcolors.RESET,
                bcolors.BLUE + "–≤–∏—Ö—ñ–¥ –∑ –ø—Ä–æ–≥—Ä–∞–º–∏" + bcolors.RESET,
                bcolors.BLUE + "–≤–∏—Ö—ñ–¥ –∑ –ø—Ä–æ–≥—Ä–∞–º–∏" + bcolors.RESET,
            ]



        elif language == 'ua':
            command_list = [
                bcolors.ORANGE + "–º–æ–∂–ª–∏–≤–æ—Å—Ç—ñ" + bcolors.RESET,
                bcolors.ORANGE + "–∑–º—ñ—Ç–∏ –º–æ–≤—É" + bcolors.RESET,
                bcolors.ORANGE + "–¥–æ–¥–∞—Ç–∏ –∫–æ–Ω—Ç–∞–∫—Ç" + bcolors.RESET,
                bcolors.ORANGE + "–ø–æ—à—É–∫ –∫–æ–Ω—Ç–∞–∫—Ç–∞" + bcolors.RESET,
                bcolors.ORANGE + "–ø–æ–∫–∞–∑–∞—Ç–∏ –≤—Å—ñ –∫–æ–Ω—Ç–∞–∫—Ç–∏" + bcolors.RESET,
                bcolors.ORANGE + "–¥–æ–¥–∞—Ç–∏ —Ç–µ–ª–µ—Ñ–æ–Ω" + bcolors.RESET,
                bcolors.ORANGE + "–≤–∏–¥–∞–ª–∏—Ç–∏ —Ç–µ–ª–µ—Ñ–æ–Ω" + bcolors.RESET,
                bcolors.ORANGE + "–¥–æ–¥–∞—Ç–∏ –µ–ª–µ–∫—Ç—Ä–æ–Ω–Ω—É –ø–æ—à—Ç—É" + bcolors.RESET,
                bcolors.ORANGE + "–≤–∏–¥–∞–ª–∏—Ç–∏ –µ–ª–µ–∫—Ç—Ä–æ–Ω–Ω—É –ø–æ—à—Ç—É" + bcolors.RESET,
                bcolors.ORANGE + "—Ä–µ–¥–∞–≥—É–≤–∞—Ç–∏ —Ç–µ–ª–µ—Ñ–æ–Ω" + bcolors.RESET,
                bcolors.ORANGE + "—Ä–µ–¥–∞–≥—É–≤–∞—Ç–∏ –µ–ª–µ–∫—Ç—Ä–æ–Ω–Ω—É –ø–æ—à—Ç—É" + bcolors.RESET,
                bcolors.ORANGE + "—Ä–µ–¥–∞–≥—É–≤–∞—Ç–∏ –¥–µ–Ω—å –Ω–∞—Ä–æ–¥–∂–µ–Ω–Ω—è" + bcolors.RESET,
                bcolors.ORANGE + "–≤–∏–¥–∞–ª–∏—Ç–∏ –∫–æ–Ω—Ç–∞–∫—Ç" + bcolors.RESET,
                bcolors.ORANGE + "–ø–æ–∫–∞–∑–∞—Ç–∏ –¥–Ω—ñ –Ω–∞—Ä–æ–¥–∂–µ–Ω–Ω—è" + bcolors.RESET,
                bcolors.ORANGE + "–¥–æ–¥–∞—Ç–∏ –Ω–æ—Ç–∞—Ç–∫—É" + bcolors.RESET,
                bcolors.ORANGE + "–∑–Ω–∞–π—Ç–∏ –Ω–æ—Ç–∞—Ç–∫—É" + bcolors.RESET,
                bcolors.ORANGE + "–ø–æ–∫–∞–∑–∞—Ç–∏ –≤—Å—ñ –Ω–æ—Ç–∞—Ç–∫–∏" + bcolors.RESET,
                bcolors.ORANGE + "—Ä–µ–¥–∞–≥—É–≤–∞—Ç–∏ –Ω–æ—Ç–∞—Ç–∫—É" + bcolors.RESET,
                bcolors.ORANGE + "–≤–∏–¥–∞–ª–∏—Ç–∏ –Ω–æ—Ç–∞—Ç–∫—É" + bcolors.RESET,
                bcolors.ORANGE + "–¥–æ–¥–∞—Ç–∏ —Ç–µ–≥" + bcolors.RESET,
                bcolors.ORANGE + "—Ä–µ–¥–∞–≥—É–≤–∞—Ç–∏ —Ç–µ–≥" + bcolors.RESET,
                bcolors.ORANGE + "–≤–∏–¥–∞–ª–∏—Ç–∏ —Ç–µ–≥" + bcolors.RESET,
                bcolors.ORANGE + "–∑–Ω–∞–π—Ç–∏ —Ç–∞ —Å–æ—Ä—Ç—É–≤–∞—Ç–∏ –ø–æ —Ç–µ–≥–∞–º" + bcolors.RESET,
                bcolors.ORANGE + "–≤—ñ–¥—Å–æ—Ä—Ç—É–≤–∞—Ç–∏ —Ñ–∞–π–ª–∏" + bcolors.RESET,
                bcolors.ORANGE + "–ø–æ–∫–∞–∑–∞—Ç–∏ –≤—Å—ñ —Ä–æ–∑—à–∏—Ä–µ–Ω–Ω—è" + bcolors.RESET,
                bcolors.ORANGE + "–¥–æ–¥–∞—Ç–∏ —Ä–æ–∑—à–∏—Ä–µ–Ω–Ω—è —Ñ–∞–π–ª–∞" + bcolors.RESET,
                bcolors.ORANGE + "–≤–∏–¥–∞–ª–∏—Ç–∏ —Ä–æ–∑—à–∏—Ä–µ–Ω–Ω—è —Ñ–∞–π–ª–∞" + bcolors.RESET,
                bcolors.ORANGE + "–¥–æ –∑—É—Å—Ç—Ä—ñ—á—ñ" + bcolors.RESET,
            ]

            command_explain = [
                bcolors.BLUE + "–≤–∏–≤–æ–¥–∏—Ç—å —Å–ø–∏—Å–æ–∫ –≤—Å—ñ—Ö –¥–æ—Å—Ç—É–ø–Ω–∏—Ö –∫–æ–º–∞–Ω–¥" + bcolors.RESET,
                bcolors.BLUE + "–∑–º—ñ–Ω–∏—Ç–∏ –º–æ–≤—É –¥–æ–¥–∞—Ç–∫–∞" + bcolors.RESET,
                bcolors.BLUE + "–∑–±–µ—Ä—ñ–≥–∞—î –∫–æ–Ω—Ç–∞–∫—Ç –∑ —ñ–º–µ–Ω–µ–º, –∞–¥—Ä–µ—Å–æ–º, –Ω–æ–º–µ—Ä–æ–º —Ç–µ–ª–µ—Ñ–æ–Ω–∞, email —Ç–∞ –¥–Ω–µ–º –Ω–∞—Ä–æ–¥–∂–µ–Ω–Ω—è –¥–æ –∫–Ω–∏–≥–∏ –∫–æ–Ω—Ç–∞–∫—Ç—ñ–≤" + bcolors.RESET,
                bcolors.BLUE + "–∑–¥—ñ–π—Å–Ω—é—î –ø–æ—à—É–∫ –∫–æ–Ω—Ç–∞–∫—Ç—É —Å–µ—Ä–µ–¥ –∫–æ–Ω—Ç–∞–∫—Ç—ñ–≤ –∫–Ω–∏–≥–∏" + bcolors.RESET,
                bcolors.BLUE + "–ø–æ–∫–∞–∑—É—î –≤—Å—ñ —ñ—Å–Ω—É—é—á—ñ –∫–æ–Ω—Ç–∞–∫—Ç–∏ –≤ –∫–Ω–∏–∑—ñ –∫–æ–Ω—Ç–∞–∫—Ç—ñ–≤" + bcolors.RESET,
                bcolors.BLUE + "–¥–æ–¥–∞—Ç–∏ —ñ—â–µ 1-–∏–Ω phone –¥–æ —ñ—Å–Ω—É—é—á–æ–≥–æ –∫–æ–Ω—Ç–∞–∫—Ç—É" + bcolors.RESET,
                bcolors.BLUE + "–≤–∏–¥–∞–ª–µ–Ω–Ω—è —ñ—Å–Ω—É—é—á–æ–≥–æ phone" + bcolors.RESET,
                bcolors.BLUE + "–¥–æ–¥–∞—Ç–∏ —ñ—â–µ 1-–∏–Ω email –¥–æ —ñ—Å–Ω—É—é—á–æ–≥–æ –∫–æ–Ω—Ç–∞–∫—Ç—É" + bcolors.RESET,
                bcolors.BLUE + "–≤–∏–¥–∞–ª–µ–Ω–Ω—è —ñ—Å–Ω—É—é—á–æ–≥–æ email" + bcolors.RESET,
                bcolors.BLUE + "—Ä–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è phone —ñ—Å–Ω—É—é—á–æ–≥–æ –∫–æ–Ω—Ç–∞–∫—Ç—É" + bcolors.RESET,
                bcolors.BLUE + "—Ä–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è email —ñ—Å–Ω—É—é—á–æ–≥–æ –∫–æ–Ω—Ç–∞–∫—Ç—É" + bcolors.RESET,
                bcolors.BLUE + "—Ä–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è birthday —ñ—Å–Ω—É—é—á–æ–≥–æ –∫–æ–Ω—Ç–∞–∫—Ç—É" + bcolors.RESET,
                bcolors.BLUE + "–≤–∏–¥–∞–ª–µ–Ω–Ω—è —ñ—Å–Ω—É—é—á–æ–≥–æ –∫–æ–Ω—Ç–∞–∫—Ç—É" + bcolors.RESET,
                bcolors.BLUE + "–≤–∏–≤–æ–¥–∏—Ç—å —Å–ø–∏—Å–æ–∫ –∫–æ–Ω—Ç–∞–∫—Ç—ñ–≤, —É —è–∫–∏—Ö –¥–µ–Ω—å –Ω–∞—Ä–æ–¥–∂–µ–Ω–Ω—è —á–µ—Ä–µ–∑ –∑–∞–¥–∞–Ω—É –∫—ñ–ª—å–∫—ñ—Å—Ç—å –¥–Ω—ñ–≤ –≤—ñ–¥ –ø–æ—Ç–æ—á–Ω–æ—ó –¥–∞—Ç–∏" + bcolors.RESET,
                bcolors.BLUE + "–∑–±–µ—Ä—ñ–≥–∞—î –Ω–æ—Ç–∞—Ç–∫—É –∑–∞ —ñ–º–µ–Ω–µ–º –∞–≤—Ç–æ—Ä–∞" + bcolors.RESET,
                bcolors.BLUE + "–∑–¥—ñ–π—Å–Ω—é—î –ø–æ—à—É–∫ –Ω–æ—Ç–∞—Ç–∫–∏ —Å–µ—Ä–µ–¥ —ñ—Å–Ω—É—é—á–∏—Ö –Ω–æ—Ç–∞—Ç–∫—ñ–≤" + bcolors.RESET,
                bcolors.BLUE + "–ø–æ–∫–∞–∑—É—î –≤—Å—ñ —ñ—Å–Ω—É—é—á—ñ –Ω–æ—Ç–∞—Ç–∫–∏" + bcolors.RESET,
                bcolors.BLUE + "—Ä–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è —ñ—Å–Ω—É—é—á–æ—ó –Ω–æ—Ç–∞—Ç–∫–∏" + bcolors.RESET,
                bcolors.BLUE + "–≤–∏–¥–∞–ª–µ–Ω–Ω—è —ñ—Å–Ω—É—é—á–æ—ó –Ω–æ—Ç–∞—Ç–∫–∏" + bcolors.RESET,
                bcolors.BLUE + "–¥–æ–¥–∞–≤–∞–Ω–Ω—è —Ç–µ–≥—ñ–≤ –¥–æ —ñ—Å–Ω—É—é—á–æ—ó –Ω–æ—Ç–∞—Ç–∫–∏" + bcolors.RESET,
                bcolors.BLUE + "—Ä–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è —Ç–µ–≥—ñ–≤ —ñ—Å–Ω—É—é—á–æ—ó –Ω–æ—Ç–∞—Ç–∫–∏" + bcolors.RESET,
                bcolors.BLUE + "–≤–∏–¥–∞–ª–µ–Ω–Ω—è —Ç–µ–≥—ñ–≤ –∑ —ñ—Å–Ω—É—é—á–æ—ó –Ω–æ—Ç–∞—Ç–∫–∏" + bcolors.RESET,
                bcolors.BLUE + "–ø–æ—à—É–∫ —Ç–∞ —Å–æ—Ä—Ç—É–≤–∞–Ω–Ω—è –Ω–æ—Ç–∞—Ç–æ–∫ –∑–∞ —Ç–µ–≥–∞–º–∏" + bcolors.RESET,
                bcolors.BLUE + "—Å–æ—Ä—Ç—É–≤–∞–Ω–Ω—è —Ñ–∞–π–ª—ñ–≤ —É –∑–∞–∑–Ω–∞—á–µ–Ω—ñ–π –ø–∞–ø—Ü—ñ –∑–∞ –∫–∞—Ç–µ–≥–æ—Ä—ñ—è–º–∏ (–∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è, –¥–æ–∫—É–º–µ–Ω—Ç–∏, –≤—ñ–¥–µ–æ —Ç–∞ —ñ–Ω.)." + bcolors.RESET,
                bcolors.BLUE + "–ø–æ–∫–∞–∑–∞—Ç–∏ –≤—Å—ñ –Ω–∞—è–≤–Ω—ñ —Ä–æ–∑—à–∏—Ä–µ–Ω–Ω—è–¥–ª—è —Å–æ—Ä—Ç—É–≤–∞–Ω–Ω—è" + bcolors.RESET,
                bcolors.BLUE + "–¥–æ–¥–∞–≤–∞–Ω–Ω—è –¥–æ–¥–∞—Ç–∫–æ–≤–æ —Ä–æ–∑—à–∏—Ä–µ–Ω–Ω—è –¥–ª—è —Å–æ—Ä—Ç—É–≤–∞–Ω–Ω—è" + bcolors.RESET,
                bcolors.BLUE + "–≤–∏–¥–∞–ª–µ–Ω–Ω—è —Ä–æ–∑—à–∏—Ä–µ–Ω–Ω—è —ñ–∑ —Å–ø–∏—Å–∫—É –¥–ª—è —Å–æ—Ä—Ç—É–≤–∞–Ω–Ω—è" + bcolors.RESET,
                bcolors.BLUE + "–±–æ—Ç —ñ–¥–µ –≤—ñ–¥–ø–æ—á–∏–≤–∞—Ç–∏" + bcolors.RESET,
            ]

        if language:
            return "".join(
                "|{:<10} - {:<20}|\n".format(command_list[item], command_explain[item])
                for item in range(len(command_list)))

class AddContact(AbstractUserInterface):

    id=1

    def handle(self):
        result=self.add_contacts()
        return result

    def add_contacts(self):
        attempts = 0
        flag_name = False
        flag_phone = False
        flag_birthday = False
        flag_email = False

        while attempts < 3:
            try:
                while not flag_name:
                    print(f"{bcolors.ORANGE}üìù Please enter your name that contains more than two characters:‚úçÔ∏è  {bcolors.RESET}")
                    name = input(f"{bcolors.BOLD}üìù Please enter your name:‚úçÔ∏è  {bcolors.RESET}")

                    record = Record(name)
                    for contact in self.data:
                        if contact["name"].name == name:
                            print(f"{bcolors.WARNING}‚ùå Contact with this name already exists, try to enter another name!üòû {bcolors.RESET}")
                            print(f"{bcolors.WARNING}üìù Please enter the name again or command ['q', 'back', 'exit', 'quit'] for exit menu:‚úçÔ∏è  {bcolors.RESET}")
                            if name in ['q', 'back', 'exit', 'quit']:
                                return
                            break
                    else:
                        flag_name = True

                if not flag_phone:
                    while True:
                        print(f"{bcolors.ORANGE}üìû Exsamples of the input: (+380) or (380) or (10 digits)‚úÖ {bcolors.RESET}")
                        phone = input(f"{bcolors.BOLD}üìû Please enter phone:‚úçÔ∏è  {bcolors.RESET}")
                        if phone in ['q', 'back', 'exit', 'quit']:
                            return
                        try:
                            record.add_phone(phone)
                            flag_phone = True
                            break
                        except ValueError as error:
                            print(f"{bcolors.FAIL}‚ùå Error‚ùó - {error}{bcolors.RESET}")
                            print(f"{bcolors.WARNING}üìû Please enter the phone number again or command ['q', 'back', 'exit', 'quit'] for exit menu:‚úçÔ∏è {bcolors.RESET}")

                if not flag_birthday:
                    while True:
                        print(f"{bcolors.ORANGE}üéÇ Please enter birthday in format (YYYY-MM-DD):‚úçÔ∏è  {bcolors.RESET}")
                        birthday = input(f"{bcolors.BOLD}üéÇ Please enter birthday:‚úçÔ∏è  {bcolors.RESET}")
                        if birthday in ['q', 'back', 'exit', 'quit']:
                            return
                        if birthday:
                            try:
                                record.birthday = Birthday(birthday)
                                flag_birthday = True
                                break
                            except ValueError as error:
                                print(f"{bcolors.FAIL}‚ùå Error‚ùó - {bcolors.RESET}{error}")
                                print(f"{bcolors.WARNING}üéÇ Please enter the birthday again or command ['q', 'back', 'exit', 'quit'] for exit menu:‚úçÔ∏è  {bcolors.RESET}")

                if not flag_email:
                    while True:
                        print(f"{bcolors.ORANGE}üìß Please enter email in format (example@example.com):‚úçÔ∏è  {bcolors.RESET}")
                        email = input(f"{bcolors.BOLD}üìß Please enter email:‚úçÔ∏è  {bcolors.RESET}")
                        if email in ['q', 'back', 'exit', 'quit']:
                            return
                        try:
                            record.add_email(email)
                            flag_email = True
                            break
                        except ValueError as error:
                            print(f"{bcolors.FAIL}‚ùå Error‚ùó - {bcolors.RESET}{error}")
                            print(f"{bcolors.WARNING}üìß Please enter the email again or command ['q', 'back', 'exit', 'quit'] for exit menu:‚úçÔ∏è {bcolors.RESET}")

                contacts = {
                    "id": AddContact.id,
                    "name": record.name,
                    "phone": record.phones,
                    "birthday": record.birthday,
                    "email": [str(email) for email in record.email],
                }
                self.data.append(contacts)
                AddContact.id += 1
                print(f"{bcolors.GREEN}üë§ Contact added successfully!‚úÖ{bcolors.RESET}")
                break
            except Exception as e:
                attempts += 1
                print(f"{bcolors.FAIL}Error‚ùó - {bcolors.RESET}{e}")
                print(f"{bcolors.WARNING}üîÑ Please enter the information again!üîÑ {bcolors.RESET}")

class SearchContact(AbstractUserInterface):

    def handle(self):
        result=self.search_contact()
        return result

    def search_contact(self):
        name = input(f"{bcolors.BOLD}üîç Please enter the name of the contact you want to find:‚úçÔ∏è  {bcolors.RESET}")
        matching_contacts = [contact for contact in self.data if contact["name"].name.lower() == name.lower()]

        if not matching_contacts:
            print(f"{bcolors.WARNING}üòû No contacts found with the name üë§ '{name}'{bcolors.RESET}")
            print(emojize(f"{bcolors.WARNING}üòû Contact with name '{name}' does not found‚ùå {bcolors.RESET}"))
            print(f"{bcolors.GREEN}ü§ó But, you can add a contact if you want ‚úèÔ∏è {bcolors.RESET}")
            return

        print(f"{bcolors.GREEN}üîç Search results for '{name}':üöÄ  {bcolors.RESET}")
        print(f"{bcolors.GREEN}üéâ Find contact with nameü§ó  {name}{bcolors.RESET}")
        table = []
        for contact in matching_contacts:
            phone_numbers = ", ".join(str(phone) for phone in contact.get("phone", []))
            emails = ", ".join(str(email) for email in contact.get("email", []))
            table.append([
                str(contact["id"]),
                str(contact["name"]),
                phone_numbers,
                str(contact.get("birthday", "")),
                emails,
            ])

        headers = [
            emojize(f":id: {bcolors.BLUE}ID{bcolors.RESET}", language="alias"),
            emojize(f":bust_in_silhouette: {bcolors.BLUE}Name{bcolors.RESET}", language="alias"),
            emojize(f":telephone_receiver: {bcolors.BLUE}Phone{bcolors.RESET}", language="alias"),
            emojize(f":birthday_cake: {bcolors.BLUE}Birthday{bcolors.RESET}", language="alias"),
            emojize(f":e-mail: {bcolors.BLUE}Email{bcolors.RESET}", language="alias"),
        ]

        print(tabulate(table, headers=headers, tablefmt='pretty'))


class ContactPhoneAdd(AbstractUserInterface):

    def handle(self):
        result=self.add_phone()
        return result

    def add_phone(self):
        user_input = input(f"{bcolors.BOLD}üîç Please enter name:‚úçÔ∏è  {bcolors.RESET}")
        error_flag = False
        for contact in self.data:
            if str(contact["name"]) == user_input:
                error_flag = True
                phone = input(f"{bcolors.BOLD}üîç Please enter phoneüìû: {bcolors.RESET}")
                contact["phone"].append(phone)
                print(f"{bcolors.GREEN}üìû Phone number '{phone}' successfully added!‚úÖ{bcolors.RESET}")
        if not error_flag:
            print(f"{bcolors.FAIL}‚ùå Contact '{user_input}' isn't here!üòû{bcolors.RESET}")

class ContactPhoneRemove(AbstractUserInterface):

    def handle(self):
        result=self.remove_phone()
        return result

    def remove_phone(self):
        name = input(f"{bcolors.BOLD}üîç Please enter name:‚úçÔ∏è  {bcolors.RESET}")
        error_flag = False
        for contacts in self.data:
            if str(contacts["name"]) == name:
                error_flag = True
                phone_numbers = ", ".join(
                    str(phone) for phone in contacts.get("phone", [])
                )
                print(f"{bcolors.WARNING}Select the phone you want to delete{bcolors.RESET}")
                print(f"{bcolors.BLUE}{phone_numbers}{bcolors.WARNING}")
                phone_to_remove = input(f"{bcolors.BOLD}üîç Please enter the phone number to remove:‚úçÔ∏è  {bcolors.RESET}")
                phone_object_to_remove = None

                for phone_object in contacts["phone"]:
                    if str(phone_object) == phone_to_remove:
                        phone_object_to_remove = phone_object
                        break

                if phone_object_to_remove is not None:
                    contacts["phone"].remove(phone_object_to_remove)
                    print(f"{bcolors.GREEN}üìû The phone number '{name}' was successfully deleted!‚úÖ{bcolors.RESET}")
                else:
                    print(f"{bcolors.FAIL}üìû Phone number '{phone_to_remove}' not found‚ùå {bcolors.RESET}")
        if not error_flag:
            print(f"{bcolors.FAIL}üë§ Contact '{name}' isn't here!‚ùå {bcolors.RESET}")

class ContactEmailAdd(AbstractUserInterface):

    def handle(self):
        result=self.add_email()
        return  result

    def add_email(self):
        user_input = input(f"{bcolors.BOLD}üîç Please enter name:‚úçÔ∏è  {bcolors.RESET}")
        error_flag = False
        for contact in self.data:
            if str(contact["name"]) == user_input:
                error_flag = True
                email = input(f"{bcolors.BOLD}üìß Please enter email:‚úçÔ∏è  {bcolors.RESET}")
                contact["email"].append(email)
                print(f"{bcolors.GREEN}üìß Email '{email}' Successfully added!‚úÖ{bcolors.RESET}")

        if not error_flag:
            print(f"{bcolors.FAIL}üë§ Contact isn't here!üòû{bcolors.RESET}")


class ContactEmailRemove(AbstractUserInterface):

    def handle(self):
        result=self.remove_email()
        return result

    def remove_email(self):
        user_input = input(f"{bcolors.BOLD}üîç Please enter name:‚úçÔ∏è  {bcolors.RESET}")
        error_flag = False
        for contact in self.data:
            if str(contact["name"]) == user_input:
                error_flag = True
                email_list = ", ".join(
                    str(email) for email in contact.get("email", [])
                )
                print(f"{bcolors.WARNING}Select the emails you want to delete{bcolors.RESET}")
                print(f"{bcolors.BLUE}{email_list}{bcolors.WARNING}")
                email_to_remove = input(f"{bcolors.BOLD}üîç Please enter the email to remove:‚úçÔ∏è  {bcolors.RESET}")
                email_object_to_remove = None

                for email_object in contact["email"]:
                    if str(email_object) == email_to_remove:
                        email_object_to_remove = email_object
                        break

                if email_object_to_remove is not None:
                    contact["email"].remove(email_object_to_remove)
                    print(f"{bcolors.GREEN}üìß Email '{email_to_remove}' successfully delete!‚úÖ{bcolors.RESET}")
                else:
                    print(f"{bcolors.FAIL}‚ùå Email '{email_to_remove}' not found.üòû{bcolors.RESET}")
        if not error_flag:
            print(f"{bcolors.FAIL}‚ùå Contact '{user_input}' isn't here!üòû{bcolors.RESET}")

class ContactPhoneEdit(AbstractUserInterface):

    def handle(self):
        result=self.edit_phone()
        return result

    def edit_phone(self):
        user_input = input(f"{bcolors.BOLD}üîç Please enter name:‚úçÔ∏è  {bcolors.RESET}")
        error_flag = False
        for contact in self.data:
            if str(contact["name"]) == user_input:
                error_flag = True
                phone_numbers = ", ".join(
                    str(phone) for phone in contact.get("phone", [])
                )
                print(f"{bcolors.WARNING}Select the phone you want to edit{bcolors.RESET}")
                print(f"{bcolors.BLUE}{phone_numbers}{bcolors.WARNING}")
                edit_to_phone_number = input(f"{bcolors.BOLD}üìû Enter the phone number to edit:‚úçÔ∏è  {bcolors.RESET}")
                new_phone_number = input(f"{bcolors.BOLD}üìû Enter the new phone number:‚úçÔ∏è  {bcolors.RESET}")
                phone_number_object_to_edit = None

                for i, phone_number_object in enumerate(contact["phone"]):
                    if str(phone_number_object) == edit_to_phone_number:
                        phone_number_object_to_edit = phone_number_object
                        break

                if phone_number_object_to_edit is not None:
                    print(f"{bcolors.WARNING}üìû Old phone number: '{phone_number_object_to_edit}'{bcolors.RESET}")
                    print(f"{bcolors.GREEN}üìû Successfully changed to '{new_phone_number}'‚úÖ{bcolors.RESET}")
                    contact["phone"].remove(phone_number_object_to_edit)
                    contact["phone"].append(new_phone_number)
                    print(f"{bcolors.GREEN}üìû Phone number '{new_phone_number}' edited successfully!‚úÖ{bcolors.RESET}")
                else:
                    print(
                        f"{bcolors.FAIL}üìû Error editing phone number '{new_phone_number}': Phone Number not found‚ùå{bcolors.RESET}")

        if not error_flag:
            print(f"{bcolors.FAIL}‚ùå There are no contacts with such name '{user_input}'!{bcolors.RESET}")

class ContactEmailEdit(AbstractUserInterface):

    def handle(self):
        result=self.edit_email()
        return result

    def edit_email(self):
        user_input = input(f"{bcolors.BOLD}üîç Please enter name:‚úçÔ∏è  {bcolors.RESET}")
        error_flag = False
        for contact in self.data:
            if str(contact["name"]) == user_input:
                error_flag = True
                email_list = ", ".join(
                    str(email) for email in contact.get("email", [])
                )
                print(f"{bcolors.WARNING}Select the emails you want to edit{bcolors.RESET}")
                print(f"{bcolors.BLUE}{email_list}{bcolors.WARNING}")
                edit_to_email = input(f"{bcolors.BOLD}üîç Enter the email to edit: {bcolors.RESET}")
                new_email = input(f"{bcolors.BOLD}üìß Enter new email:‚úçÔ∏è  {bcolors.RESET}")
                email_object_to_edit = None

                for i, email_object in enumerate(contact["email"]):
                    if str(email_object) == edit_to_email:
                        email_object_to_edit = email_object
                        break

                if email_object_to_edit is not None:
                    print(f"{bcolors.BOLD}üìß Old email: '{email_object_to_edit}{bcolors.RESET}'")
                    print(f"{bcolors.GREEN}üìß Email successfully changed to '{new_email}'‚úÖ{bcolors.RESET}")

                    contact["email"].remove(email_object_to_edit)
                    contact["email"].append(new_email)

                    print(f"{bcolors.GREEN}üìß Email edited '{edit_to_email}' successfully!‚úÖ{bcolors.RESET}")
                else:
                    print(f"{bcolors.FAIL}‚ùå Error editing email '{edit_to_email}': email not found!‚ùå{bcolors.RESET}")
        if not error_flag:
            print(f"{bcolors.FAIL}‚ùå Contact '{user_input}' isn't here!üòû{bcolors.RESET}")


class ContactBirthdayEdit(AbstractUserInterface):

    def handle(self):
        result=self.edit_birthday()
        return result

    def edit_birthday(self):  # —Ä–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è birthday —ñ—Å–Ω—É—é—á–æ–≥–æ –∫–æ–Ω—Ç–∞–∫—Ç—É
        name = input(f'{bcolors.BOLD}üîç Enter name of contact:‚úçÔ∏è  {bcolors.RESET}')
        error_flag = False
        for contact in self.data:
            if contact['name'].name == name and contact['birthday']:
                new_birthday = input('Enter new birthday: ')
                try:
                    contact['birthday'] = Birthday(new_birthday)
                    print(f'{bcolors.GREEN}üéÇ Birthday "{new_birthday}" was changed!‚úÖ{bcolors.RESET}')
                except ValueError as ex:
                    print(ex)
                error_flag = True

        if not error_flag:
            print(f"{bcolors.FAIL}‚ùå There are no contacts with such name '{name}'!{bcolors.RESET}")

class ContactRemove(AbstractUserInterface):

    def handle(self):
        result=self.del_contact()
        return result

    def del_contact(self):
        name = input(f"{bcolors.BOLD }üìù Please enter name:‚úçÔ∏è  {bcolors.RESET}")
        contacts=[]
        for contact in self.data:
            if str(contact["name"]) == name:
                contacts.append(contact)
                self.data.remove(contact)
        if contacts:
            for i in contacts:
                print(f"{bcolors.GREEN}üë§ Contact '{i['name'].name}' was deleted!‚úÖ{bcolors.RESET}")
        else:
            print(f"{bcolors.FAIL}üîç Contact '{name}' is not found! üòû{bcolors.RESET}")

class DisplayBirthdays(AbstractUserInterface):

    def handle(self):
        result=self.show_contacts_birthdays()
        return result

    def show_contacts_birthdays(self):
        while 1:
            try:
                days = int(input(f"{bcolors.BOLD}ü§ó Enter days:‚úçÔ∏è  {bcolors.RESET}"))
                break
            except Exception as e:
                print(f"{bcolors.WARNING}Enter the number of days by number and not string!{bcolors.RESET}")
                continue

        contacts = []

        for contact in self.data:
            if 'birthday' in contact and contact['birthday']:
                birthday_date = contact['birthday'].value
                record = Record(contact['name'].name, birthday=birthday_date)
                if record.days_to_date(days, birthday_date):
                    contacts.append(contact)

        if contacts:
            for uzer in contacts:
                print(f'{bcolors.GREEN}Name: {uzer["name"].name}, Birthday:üéÇ  {uzer["birthday"].value}{bcolors.RESET}')
        else:
            print(f'{bcolors.WARNING}üéÇ There are no birthdays in this number of day!{bcolors.RESET}')