#poetry run python CODE_CRAFTERS_CORE/main.py
from FileSorting import executing_command
from prompt_toolkit.application.current import get_app
from prompt_toolkit.completion import WordCompleter
from RecordData import bcolors
from AddressBook import *
from NoteFeature import *
from prompt_toolkit import PromptSession
from prompt_toolkit.styles import Style
from pathlib import Path
import threading
import asyncio
import random
from interface import ConsoleUI, GetCommand,AddContact,SearchContact,ContactPhoneAdd,ContactPhoneRemove,ContactEmailAdd,ContactEmailRemove,ContactPhoneEdit,ContactEmailEdit,ContactBirthdayEdit,ContactRemove,DisplayBirthdays
from interface_note import *
from prompt_toolkit import prompt
from prompt_toolkit.completion import WordCompleter
from command_list import command_list



def main():

    exit_flag = False
    language_flag = False
    file_name = "database.bin"
    note_name = "notebase.bin"
    file_database = Path(file_name)
    note_database = Path(note_name)
    command_list_user = command_list
    command_completer = WordCompleter(command_list_user)


    # Deserialization adddressbook
    if file_database.exists() and file_database.is_file():
        with open(file_database, "rb") as fh:
            check_content = fh.read()

        if not check_content:
            book = AddressBook()
        else:
            deserialization = AddressBook()
            book = deserialization.read_from_file(file_name)
    else:
        with open(file_database, "wb") as fh:
            pass
        book = AddressBook()

    # Deserialization notebook
    if note_database.exists() and note_database.is_file():
        with open(note_database, "rb") as fh:
            check_content = fh.read()
        if not check_content:
            note = NoteBook()
        else:
            deserialization = NoteBook()
            note = deserialization.note_read_from_file(note_name)
    else:
        with open(note_database, "wb") as fh:
            pass
        note = NoteBook()

    print(f"{bcolors.PINK}üëã Hello! My name is Bot Jul. Please choose the language and we will begin ü§ñ {bcolors.RESET}")

    try:
        while 1:
            if not language_flag:
                language = input(f"{bcolors.BOLD}üè≥Ô∏è  Please choose a language (en/:ru:/ua): {bcolors.RESET}")
                language_flag = True
                language_uzer=language
                if not language in ("en", "ru", 'ua'):
                    while 1:
                        print(f"{bcolors.BOLD}üôÉ  Wrong language format entered!\nPlease enter en | ru or ua to choose language:{bcolors.RESET}")
                        language = input(f"{bcolors.BOLD}ü´†  Please choose a language (en/ru/ua): {bcolors.RESET}")
                        if language in ("en", "ru", 'ua'):
                            language_flag = True
                            language_uzer=language
                            break

            command={'contact-show-all': ConsoleUI(book),
                     'help': GetCommand(),
                     'contact-add': AddContact(book),
                     'contact-find':SearchContact(book),
                     'contact-phone-add':ContactPhoneAdd(book),
                     'contact-phone-remove':ContactPhoneRemove(book),
                     'contact-email-add': ContactEmailAdd(book),
                     'contact-email-remove': ContactEmailRemove(book),
                     'contact-phone-edit': ContactPhoneEdit(book),
                     'contact-email-edit': ContactEmailEdit(book),
                     'contact-birthday-edit': ContactBirthdayEdit(book),
                     'contact-remove': ContactRemove(book),
                     'display-birthdays': DisplayBirthdays(book),
                     'note-add': NoteAdd(note),
                     'note-find': NoteFind(note),
                     'note-edit': NoteEdit(note),
                     'note-remove': NoteRemove(note),
                     'tag-add': TagAdd(note),
                     'tag-edit': TagEdit(note),
                     'tag-remove': TagRemove(note),
                     'tag-find-sort': TagFindSort(note),
                     'note-show-all': NoteShowAll(note),
                    }

            user_input = prompt('Enter command or  "help": ', completer=command_completer)
            if user_input in command:
                command[user_input].handle()

            match user_input:

                case "change-language" | "–∏–∑–º–µ–Ω–∏—Ç—å —è–∑—ã–∫" | "–∑–º—ñ—Ç–∏ –º–æ–≤—É":
                    language_flag = False


                case "note-show-all" | "–ø–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ –∑–∞–º–µ—Ç–∫–∏" | "–ø–æ–∫–∞–∑–∞—Ç–∏ –≤—Å—ñ –Ω–æ—Ç–∞—Ç–∫–∏":
                     #"–ø–æ–∫–∞–∑—É—î –≤—Å—ñ —ñ—Å–Ω—É—é—á—ñ –Ω–æ—Ç–∞—Ç–∫–∏"
                    note.note_show_all()

                case "file-sort" | "—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å —Ñ–∞–π–ª—ã" | "–≤—ñ–¥—Å–æ—Ä—Ç—É–≤–∞—Ç–∏ —Ñ–∞–π–ª–∏":
                    #  "—Å–æ—Ä—Ç—É–≤–∞–Ω–Ω—è —Ñ–∞–π–ª—ñ–≤ —É –∑–∞–∑–Ω–∞—á–µ–Ω—ñ–π –ø–∞–ø—Ü—ñ –∑–∞ –∫–∞—Ç–µ–≥–æ—Ä—ñ—è–º–∏ (–∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è, –¥–æ–∫—É–º–µ–Ω—Ç–∏, –≤—ñ–¥–µ–æ —Ç–∞ —ñ–Ω.)."
                    executing_command(user_input.lower())

                case "file-extension-show" | "–ø–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ —Ä–∞–∑—à–∏—Ä–µ–Ω–∏—è" | "–ø–æ–∫–∞–∑–∞—Ç–∏ –≤—Å—ñ —Ä–æ–∑—à–∏—Ä–µ–Ω–Ω—è":
                    #  "—Å–æ—Ä—Ç—É–≤–∞–Ω–Ω—è —Ñ–∞–π–ª—ñ–≤ —É –∑–∞–∑–Ω–∞—á–µ–Ω—ñ–π –ø–∞–ø—Ü—ñ –∑–∞ –∫–∞—Ç–µ–≥–æ—Ä—ñ—è–º–∏ (–∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è, –¥–æ–∫—É–º–µ–Ω—Ç–∏, –≤—ñ–¥–µ–æ —Ç–∞ —ñ–Ω.)."
                    executing_command(user_input.lower())

                case "file-extension-add" | "–¥–æ–±–∞–≤–∏—Ç—å —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ" | "–¥–æ–¥–∞—Ç–∏ —Ä–æ–∑—à–∏—Ä–µ–Ω–Ω—è —Ñ–∞–π–ª–∞":
                    #  "–¥–æ–¥–∞–≤–∞–Ω–Ω—è –¥–æ–¥–∞—Ç–∫–æ–≤–æ —Ä–æ–∑—à–∏—Ä–µ–Ω–Ω—è –¥–ª—è —Å–æ—Ä—Ç—É–≤–∞–Ω–Ω—è"
                    executing_command(user_input.lower())

                case "file-extension-remove" | "—É–¥–∞–ª–∏—Ç—å —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ" | "–≤–∏–¥–∞–ª–∏—Ç–∏ —Ä–æ–∑—à–∏—Ä–µ–Ω–Ω—è —Ñ–∞–π–ª–∞":
                    #  "–≤–∏–¥–∞–ª–µ–Ω–Ω—è —Ä–æ–∑—à–∏—Ä–µ–Ω–Ω—è —ñ–∑ —Å–ø–∏—Å–∫—É –¥–ª—è —Å–æ—Ä—Ç—É–≤–∞–Ω–Ω—è"
                    executing_command(user_input.lower())

                case "quit" | "exit" | "q" | "–≤—ã—Ö–æ–¥" | "–≤" | "–¥–æ –∑—É—Å—Ç—Ä—ñ—á—ñ" | "–¥":
                    print("Good bye!\n")
                    serialization = AddressBook()
                    serialization.save_to_file(file_name, book)
                    note_serialization = NoteBook()
                    note_serialization.note_save_to_file(note_name, note)
                    break

                case _:
                    if language == "en":
                        error_messages = [
                            f"{bcolors.WARNING}üòî Oh! You seem to have introduced the wrong command. Please try again!üòî{bcolors.RESET}",
                            f"{bcolors.WARNING}üòî Oops! This is not like the right command. Let's try againüòî{bcolors.RESET}",
                            f"{bcolors.WARNING}üòü Error: The command is not recognized. Try again.üòî{bcolors.RESET}",
                            f"{bcolors.WARNING}üòÆ Hmm, I don't understand this command. Let's try something else.üòî{bcolors.RESET}"
                        ]
                    elif language == "ua":
                        error_messages = [
                            f"{bcolors.WARNING}üòî –û–π! –ù–∞—á–µ–±—Ç–æ –í–∏ –≤–≤–µ–ª–∏ —Ö–∏–±–Ω—É –∫–æ–º–∞–Ω–¥—É. –ë—É–¥—å –ª–∞—Å–∫–∞ —Å–ø—Ä–æ–±—É–π—Ç–µ —ã—â–µ —Ä–∞–∑!üòî{bcolors.RESET}",
                            f"{bcolors.WARNING}üòØ –£–ø—Å! –¶–µ –Ω–µ —Å—Ö–æ–∂–µ –ø—Ä–∞–≤–µ–ª—å–Ω—É –∫–æ–º–∞–Ω–¥—É. –î–∞–≤–∞–π—Ç–µ —Å–ø—Ä–æ–±—É—ç–º–æ —ã—â–µ —Ä–∞–∑!üòî{bcolors.RESET}",
                            f"{bcolors.WARNING}üòî –ü–æ–º–∏–ª–∫–∞: –ù–µ–∑—Ä–æ–∑—É–º—ã–ª–∞ –∫–æ–º–∞–Ω–¥–∞. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.üòî{bcolors.RESET}",
                            f"{bcolors.WARNING}üòîüòÆ –•–º–º, —è –Ω–µ —Ä–æ–∑—É–º—ñ—é —Ü—é –∫–æ–º–∞–Ω–¥—É. –¥–∞–≤–∞–π—Ç–µ —Å–ø—Ä–æ–±—É—î–º–æ —â–æ—Å—å —ñ–Ω—à–µ!üòî{bcolors.RESET}"
                        ]

                    print(random.choice(error_messages))
                    if exit_flag:
                        timer_thread.cancel()
                        break


    except Exception as ex:
        print(f"{bcolors.FAIL}\n‚ùå Unnexpected error!{bcolors.RESET}")
        print(ex)
        serialization = AddressBook()
        serialization.save_to_file(file_name, book)
        note_serialization = NoteBook()
        note_serialization.note_save_to_file(note_name, note)

    except KeyboardInterrupt:
        print(f"{bcolors.FAIL}\n‚ùå KeyBoard interrupt error, EXITING!\n{bcolors.RESET}")

        serialization = AddressBook()
        serialization.save_to_file(file_name, book)
        note_serialization = NoteBook()
        note_serialization.note_save_to_file(note_name, note)


if __name__ == "__main__":
    try:
        main()
    except KeyboardInterrupt:
        print(f"{bcolors.BLUE}The script is interrupted by the user!{bcolors.RESET}")